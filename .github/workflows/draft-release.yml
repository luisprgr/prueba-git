name: Draft Release
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  Create_Release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # works and was tested
      - name: Get latest draft release and published release
        uses: actions/github-script@v6
        id: latest_releases
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            const draft_releases = releases.data.filter(release => release.draft === true)
            const published_releases = releases.data.filter(release => release.draft === false)
            const latest_draft_release = draft_releases.length > 0 ? draft_releases[0] : null
            const latest_published_release = published_releases.length > 0 ? published_releases[0] : null
            return { latest_draft_release, latest_published_release }

      - name: print last job output
        run: echo '${{steps.latest_releases.outputs.result}}' | python3 -m json.tool

      # works and was tested
      - name: Get tag name to use if none exists creates first tag
        uses: actions/github-script@v6
        id: tag
        with:
          script: |
            let tag = ''

            const tags_list = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              });

            if (tags_list.data.length > 0) {
              tag = tags_list.data[0].name;
            } else {
              tag = 'v0.0.1';
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha: context.sha
              });
            }

            const latest_releases = JSON.parse('${{steps.latest_releases.outputs.result}}')

            if (latest_releases.latest_published_release !== null) {
              if (latest_releases.latest_published_release.tag_name == tag) {
                const new_tag = tag.split('.');
                new_tag[2] = (parseInt(new_tag[2]) + 1).toString();
                tag = new_tag.join('.');
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/${tag}`,
                  sha: context.sha
                });
              }
            }

            return tag
          result-encoding: string

      - name: print latest job result
        run: echo ${{ steps.tag.outputs.result }}

      - name: deletes latest draft release if exists
        uses: actions/github-script@v6
        with:
          script: |
            const latest_releases = JSON.parse('${{steps.latest_releases.outputs.result}}')
            if (latest_releases.latest_draft_release !== null) {
              const release_id = JSON.parse('${{steps.latest_releases.outputs.result}}').latest_draft_release.id
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id
              })
            }

      - name: Create release message based on latest commits
        uses: actions/github-script@v6
        id: message
        with:
          script: |
            let message = ''
            if ('${{ steps.tag.outputs.result }}' == 'v0.0.1') {
              message = 'First release'
            } else {
              const commits = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                since: JSON.parse('${{steps.latest_releases.outputs.result}}').latest_published_release.published_at
              })
              commits.data.forEach(commit => {
                console.log(commit)
                console.log(commit.commit)
              })
              message = commits.data.map(commit => commit.commit.message).join('\n')
              console.log(message)
            }
            return message
          # result-encoding: string

      - name: Create Release
        uses: actions/github-script@v6
        with:
          script: |
            const tag = '${{ steps.tag.outputs.result }}';
            const message = ${{ steps.message.outputs.result }};
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Release ${tag}`,
              body: message,
              draft: true
            });



        # id: create_release
        # env:
        #   GITHUB_TOKEN: ${{ github.token }}
        # with:
        #   tag_name: ${{ steps.tag.outputs.result }}
        #   release_name: Release ${{ steps.tag.outputs.result }}
        #   draft: true
        #   body: "${{ steps.message.outputs.result }}"
# name: 'GitHub Actions',
# email: '41898282+github-actions[bot]@users.noreply.github.com'
