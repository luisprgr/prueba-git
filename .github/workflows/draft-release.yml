name: Draft Release
on:
  workflow_dispatch:
  push:
    branches:
      - main
  
jobs:
  Create_Release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # works and was tested
      - name: Get latest tag name if none exists creates first tag
        uses: actions/github-script@v6
        id: latest_tag
        with:
          script: |
            let tag = ''
            const tags_list = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              });
            if (tags_list.data.length > 0) {
              tag = tags_list.data[0].name;
            } else {
              tag = 'v0.0.1';
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha: context.sha
              });
            } 
            return tag;
      
      - name: print latest job result
        run: echo ${{ steps.latest_tag.outputs.result }}

      - name: Get latest draft release and published release
        uses: actions/github-script@v6
        id: latest_releases
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            const draft_releases = releases.data.filter(release => release.draft === true)
            const published_releases = releases.data.filter(release => release.draft === false)
            const latest_draft_release = draft_releases.length > 0 ? draft_releases[0] : null
            const latest_published_release = published_releases.length > 0 ? published_releases[0] : null
            return { latest_draft_release, latest_published_release }
      
      - name: print last job output
        run: echo '${{steps.latest_releases.outputs.result}}' | python3 -m json.tool
      
      - name: deletes latest draft release if exists
        uses: actions/github-script@v6
        if: ${{ steps.latest_releases.outputs.result.latest_draft_release }} != null
        with:
          script: |
            const release_id = JSON.parse('${{steps.latest_releases.outputs.result}}').latest_draft_release.id
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release_id
            })

      - name: Stablish new release tag if last release is not draft
        uses: actions/github-script@v6
        id: tag
        with:
          script: |
            const actual_tag = ${{ steps.latest_tag.outputs.result }};
            const release_output = '${{steps.release.outputs.result}}';
            const latest_release = release_output == 'null'? null : JSON.parse(release_output);
            
            if (latest_release == null) {
              return actual_tag;
            } else if (latest_release.draft == true) {
              return actual_tag;
            } else {
              const new_tag = actual_tag.split('.');
              new_tag[2] = (parseInt(new_tag[2]) + 1).toString();
              return new_tag.join('.');
            }

      - name: print last job output
        run: echo ${{steps.tag.outputs.result}}
      
      - name: Get latest release not draft
        uses: actions/github-script@v6
        id: latest_release
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            return releases
            // .data.filter(release => !release.draft)[0]
      
      - name: print last job output
        run: echo '${{steps.latest_release.outputs.result}}' | python3 -m json.tool
      
      - name: Create release message based on latest commits
        uses: actions/github-script@v6
        id: message
        with:
          script: |
            const commits = await github.rest.repos. listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              since: ${{ steps.latest_release.outputs.result }} != null ? ${{ steps.latest_release.outputs.result.published_at }} : '2021-01-01T00:00:00Z'
            })
            const message = commits.data.map(commit => {return commit.commit.message}).join('\n')
            return message
      
      - name: print last job output
        run: echo ${{steps.message.outputs.result}}

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.tag.outputs.result }}
          release_name: Release ${{ steps.tag.outputs.result }}
          draft: true
          message: ${{ steps.message.outputs.result }}
 


# name: 'GitHub Actions',
# email: '41898282+github-actions[bot]@users.noreply.github.com'
